input _idOperatorsFilterClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindManyClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindManySchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindManyStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindOneClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindOneSchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterFindOneStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterRemoveManyClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterRemoveManySchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterRemoveManyStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterRemoveOneSchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterSchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateManyClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateManySchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateManyStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateOneClassInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateOneSchoolInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

input _idOperatorsFilterUpdateOneStudentInput {
	gt: MongoID
	gte: MongoID
	lt: MongoID
	lte: MongoID
	ne: MongoID
	in: [MongoID]
	nin: [MongoID]
}

type Class {
	students(limit: Int = 1000, sort: SortFindByIdsStudentInput): [Student!]
	name: String!
	homework: [ClassHomework]
	schedule: [[String]]
	announcements: [ClassAnnouncements]
	roleUpCodes: [String]
	schoolName: String!
	_id: MongoID!

	"""
	Number of students
	"""
	studentsCount: Int!
}

type ClassAnnouncements {
	text: String
	attachments: [ClassHomeworkAttachments]
	to: Date
	createdBy: Float
	_id: MongoID
}

input ClassAnnouncementsInput {
	text: String
	attachments: [ClassHomeworkAttachmentsInput]
	to: Date
	createdBy: Float
	_id: MongoID
}

"""
A connection to a list of items.
"""
type ClassConnection {
	"""
	Total object count.
	"""
	count: Int!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!

	"""
	Information to aid in pagination.
	"""
	edges: [ClassEdge!]!
}

"""
An edge in a connection.
"""
type ClassEdge {
	"""
	The item at the end of the edge
	"""
	node: Class!

	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type ClassHomework {
	lesson: String!
	text: String!
	to: Date
	attachments: [ClassHomeworkAttachments]
	createdBy: Float
	_id: MongoID
}

type ClassHomeworkAttachments {
	value: String!
	url: String!
	album_id: Float
	_id: MongoID
}

input ClassHomeworkAttachmentsInput {
	value: String!
	url: String!
	album_id: Float
	_id: MongoID
}

input ClassHomeworkInput {
	lesson: String!
	text: String!
	to: Date
	attachments: [ClassHomeworkAttachmentsInput]
	createdBy: Float
	_id: MongoID
}

"""
List of items with pagination.
"""
type ClassPagination {
	"""
	Total object count.
	"""
	count: Int

	"""
	Array of objects.
	"""
	items: [Class!]

	"""
	Information to aid in pagination.
	"""
	pageInfo: PaginationInfo!
}

input CreateManyClassInput {
	students: [MongoID]
	name: String!
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String!
}

type CreateManyClassPayload {
	"""
	Created document ID
	"""
	recordIds: [MongoID!]!

	"""
	Created documents
	"""
	records: [Class!]!

	"""
	Count of all documents created
	"""
	createCount: Int!
}

input CreateManySchoolInput {
	classes: [MongoID]
	name: String!
	announcements: [SchoolAnnouncementsInput]
}

type CreateManySchoolPayload {
	"""
	Created document ID
	"""
	recordIds: [MongoID!]!

	"""
	Created documents
	"""
	records: [School!]!

	"""
	Count of all documents created
	"""
	createCount: Int!
}

input CreateManyStudentInput {
	class: MongoID
	role: EnumStudentRole!
	vkId: Float!
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
}

type CreateManyStudentPayload {
	"""
	Created document ID
	"""
	recordIds: [MongoID!]!

	"""
	Created documents
	"""
	records: [Student!]!

	"""
	Count of all documents created
	"""
	createCount: Int!
}

scalar Date

enum EnumStudentRole {
	STUDENT
	ADMIN
	CONTRIBUTOR
}

input FilterClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterClassInput
	OR: [FilterClassInput!]
	AND: [FilterClassInput!]
}

input FilterFindManyClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindManyClassInput
	OR: [FilterFindManyClassInput!]
	AND: [FilterFindManyClassInput!]
}

input FilterFindManySchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindManySchoolInput
	OR: [FilterFindManySchoolInput!]
	AND: [FilterFindManySchoolInput!]
}

input FilterFindManyStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindManyStudentInput
	OR: [FilterFindManyStudentInput!]
	AND: [FilterFindManyStudentInput!]
}

input FilterFindOneClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindOneClassInput
	OR: [FilterFindOneClassInput!]
	AND: [FilterFindOneClassInput!]
}

input FilterFindOneSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindOneSchoolInput
	OR: [FilterFindOneSchoolInput!]
	AND: [FilterFindOneSchoolInput!]
}

input FilterFindOneStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterFindOneStudentInput
	OR: [FilterFindOneStudentInput!]
	AND: [FilterFindOneStudentInput!]
}

input FilterRemoveManyClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterRemoveManyClassInput
	OR: [FilterRemoveManyClassInput!]
	AND: [FilterRemoveManyClassInput!]
}

input FilterRemoveManySchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterRemoveManySchoolInput
	OR: [FilterRemoveManySchoolInput!]
	AND: [FilterRemoveManySchoolInput!]
}

input FilterRemoveManyStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterRemoveManyStudentInput
	OR: [FilterRemoveManyStudentInput!]
	AND: [FilterRemoveManyStudentInput!]
}

input FilterRemoveOneSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterRemoveOneSchoolInput
	OR: [FilterRemoveOneSchoolInput!]
	AND: [FilterRemoveOneSchoolInput!]
}

input FilterSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterSchoolInput
	OR: [FilterSchoolInput!]
	AND: [FilterSchoolInput!]
}

input FilterStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterStudentInput
	OR: [FilterStudentInput!]
	AND: [FilterStudentInput!]
}

input FilterUpdateManyClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateManyClassInput
	OR: [FilterUpdateManyClassInput!]
	AND: [FilterUpdateManyClassInput!]
}

input FilterUpdateManySchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateManySchoolInput
	OR: [FilterUpdateManySchoolInput!]
	AND: [FilterUpdateManySchoolInput!]
}

input FilterUpdateManyStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateManyStudentInput
	OR: [FilterUpdateManyStudentInput!]
	AND: [FilterUpdateManyStudentInput!]
}

input FilterUpdateOneClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateOneClassInput
	OR: [FilterUpdateOneClassInput!]
	AND: [FilterUpdateOneClassInput!]
}

input FilterUpdateOneSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateOneSchoolInput
	OR: [FilterUpdateOneSchoolInput!]
	AND: [FilterUpdateOneSchoolInput!]
}

input FilterUpdateOneStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID
	_ids: [MongoID]

	"""
	List of *indexed* fields that can be filtered via operators.
	"""
	_operators: OperatorsFilterUpdateOneStudentInput
	OR: [FilterUpdateOneStudentInput!]
	AND: [FilterUpdateOneStudentInput!]
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
	studentCreateOne(vkId: Int!): Student

	"""
	Creates Many documents with mongoose defaults, setters, hooks and validation
	"""
	studentCreateMany(records: [CreateManyStudentInput!]!): CreateManyStudentPayload

	"""
	Update one document: 1) Retrieve one document by findById. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	studentUpdateById(record: UpdateByIdStudentInput!): UpdateByIdStudentPayload

	"""
	Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	studentUpdateOne(
		record: UpdateOneStudentInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateOneStudentInput
		sort: SortUpdateOneStudentInput
		skip: Int
	): UpdateOneStudentPayload

	"""
	Update many documents without returning them: Use Query.update mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	studentUpdateMany(
		record: UpdateManyStudentInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateManyStudentInput
		sort: SortUpdateManyStudentInput
		skip: Int
		limit: Int = 1000
	): UpdateManyStudentPayload

	"""
	Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
	"""
	studentRemoveById(_id: MongoID!): RemoveByIdStudentPayload
	studentRemoveOne(vkId: Int!): Student

	"""
	Remove many documents without returning them: Use Query.remove mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	studentRemoveMany(
		"""
		Filter by fields
		"""
		filter: FilterRemoveManyStudentInput!
	): RemoveManyStudentPayload
	classCreateOne(className: String!, schoolName: String!): Class

	"""
	Creates Many documents with mongoose defaults, setters, hooks and validation
	"""
	classCreateMany(records: [CreateManyClassInput!]!): CreateManyClassPayload

	"""
	Update one document: 1) Retrieve one document by findById. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	classUpdateById(record: UpdateByIdClassInput!): UpdateByIdClassPayload

	"""
	Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	classUpdateOne(
		record: UpdateOneClassInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateOneClassInput
		sort: SortUpdateOneClassInput
		skip: Int
	): UpdateOneClassPayload

	"""
	Update many documents without returning them: Use Query.update mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	classUpdateMany(
		record: UpdateManyClassInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateManyClassInput
		sort: SortUpdateManyClassInput
		skip: Int
		limit: Int = 1000
	): UpdateManyClassPayload

	"""
	Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
	"""
	classRemoveById(_id: MongoID!): RemoveByIdClassPayload
	classRemoveOne(className: String!, schoolName: String!): Class

	"""
	Remove many documents without returning them: Use Query.remove mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	classRemoveMany(
		"""
		Filter by fields
		"""
		filter: FilterRemoveManyClassInput!
	): RemoveManyClassPayload
	schoolCreateOne(schoolName: String!): Class

	"""
	Creates Many documents with mongoose defaults, setters, hooks and validation
	"""
	schoolCreateMany(records: [CreateManySchoolInput!]!): CreateManySchoolPayload

	"""
	Update one document: 1) Retrieve one document by findById. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	schoolUpdateById(record: UpdateByIdSchoolInput!): UpdateByIdSchoolPayload

	"""
	Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
	mongoose document. 3) Mongoose applies defaults, setters, hooks and
	validation. 4) And save it.
	"""
	schoolUpdateOne(
		record: UpdateOneSchoolInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateOneSchoolInput
		sort: SortUpdateOneSchoolInput
		skip: Int
	): UpdateOneSchoolPayload

	"""
	Update many documents without returning them: Use Query.update mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	schoolUpdateMany(
		record: UpdateManySchoolInput!

		"""
		Filter by fields
		"""
		filter: FilterUpdateManySchoolInput
		sort: SortUpdateManySchoolInput
		skip: Int
		limit: Int = 1000
	): UpdateManySchoolPayload

	"""
	Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
	"""
	schoolRemoveById(_id: MongoID!): RemoveByIdSchoolPayload

	"""
	Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
	"""
	schoolRemoveOne(
		"""
		Filter by fields
		"""
		filter: FilterRemoveOneSchoolInput
		sort: SortRemoveOneSchoolInput
	): RemoveOneSchoolPayload

	"""
	Remove many documents without returning them: Use Query.remove mongoose
	method. Do not apply mongoose defaults, setters, hooks and validation.
	"""
	schoolRemoveMany(
		"""
		Filter by fields
		"""
		filter: FilterRemoveManySchoolInput!
	): RemoveManySchoolPayload
	changeDay(
		className: String!
		dayIndex: Int!
		newSchedule: [String]!
		schoolName: String!
	): Class
	changeSettings(vkId: Int!, diffObject: StudentSettingsInput): Boolean
	removeStudentFromClass(vkId: Int!): Student!
	changeClass(vkId: Int!, newClassName: String!, schoolName: String!): Student
	addHomework(
		student_id: Int!
		className: String!
		text: String!
		to: String
		lesson: String!
		attachments: [ClassHomeworkAttachmentsInput]!
		schoolName: String!
	): ClassHomework
	removeHomework(className: String!, homeworkId: String!, schoolName: String!): String
	updateHomework(
		className: String!
		homeworkId: String!
		updates: ClassHomeworkInput
		schoolName: String!
	): ClassHomework
	addAnnouncement(
		student_id: Int!
		className: String!
		text: String!
		to: String
		attachments: [ClassHomeworkAttachmentsInput]!
		schoolName: String!
	): ClassAnnouncements
	removeAnnouncement(className: String!, announcementId: String!, schoolName: String!): String
	updateAnnouncement(
		className: String!
		announcementId: String!
		updates: ClassAnnouncementsInput!
		schoolName: String!
	): ClassAnnouncements
	removeOldAnnouncements(className: String!, schoolName: String!): [ClassAnnouncements]
	removeOldHomework(className: String!, schoolName: String!): [ClassHomework]
}

input NameOperatorsFilterClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterFindManyClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterFindManySchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterFindOneClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterFindOneSchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterRemoveManyClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterRemoveManySchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterRemoveOneSchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterSchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterUpdateManyClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterUpdateManySchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterUpdateOneClassInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

input NameOperatorsFilterUpdateOneSchoolInput {
	gt: String
	gte: String
	lt: String
	lte: String
	ne: String
	in: [String]
	nin: [String]
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterClassInput {
	name: NameOperatorsFilterClassInput
	_id: _idOperatorsFilterClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindManyClassInput {
	name: NameOperatorsFilterFindManyClassInput
	_id: _idOperatorsFilterFindManyClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindManySchoolInput {
	name: NameOperatorsFilterFindManySchoolInput
	_id: _idOperatorsFilterFindManySchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindManyStudentInput {
	vkId: VkIdOperatorsFilterFindManyStudentInput
	_id: _idOperatorsFilterFindManyStudentInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindOneClassInput {
	name: NameOperatorsFilterFindOneClassInput
	_id: _idOperatorsFilterFindOneClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindOneSchoolInput {
	name: NameOperatorsFilterFindOneSchoolInput
	_id: _idOperatorsFilterFindOneSchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterFindOneStudentInput {
	vkId: VkIdOperatorsFilterFindOneStudentInput
	_id: _idOperatorsFilterFindOneStudentInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterRemoveManyClassInput {
	name: NameOperatorsFilterRemoveManyClassInput
	_id: _idOperatorsFilterRemoveManyClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterRemoveManySchoolInput {
	name: NameOperatorsFilterRemoveManySchoolInput
	_id: _idOperatorsFilterRemoveManySchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterRemoveManyStudentInput {
	vkId: VkIdOperatorsFilterRemoveManyStudentInput
	_id: _idOperatorsFilterRemoveManyStudentInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterRemoveOneSchoolInput {
	name: NameOperatorsFilterRemoveOneSchoolInput
	_id: _idOperatorsFilterRemoveOneSchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterSchoolInput {
	name: NameOperatorsFilterSchoolInput
	_id: _idOperatorsFilterSchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterStudentInput {
	vkId: VkIdOperatorsFilterStudentInput
	_id: _idOperatorsFilterStudentInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateManyClassInput {
	name: NameOperatorsFilterUpdateManyClassInput
	_id: _idOperatorsFilterUpdateManyClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateManySchoolInput {
	name: NameOperatorsFilterUpdateManySchoolInput
	_id: _idOperatorsFilterUpdateManySchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateManyStudentInput {
	vkId: VkIdOperatorsFilterUpdateManyStudentInput
	_id: _idOperatorsFilterUpdateManyStudentInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateOneClassInput {
	name: NameOperatorsFilterUpdateOneClassInput
	_id: _idOperatorsFilterUpdateOneClassInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateOneSchoolInput {
	name: NameOperatorsFilterUpdateOneSchoolInput
	_id: _idOperatorsFilterUpdateOneSchoolInput
}

"""
For performance reason this type contains only *indexed* fields.
"""
input OperatorsFilterUpdateOneStudentInput {
	vkId: VkIdOperatorsFilterUpdateOneStudentInput
	_id: _idOperatorsFilterUpdateOneStudentInput
}

"""
Information about pagination in a connection.
"""
type PageInfo {
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!

	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!

	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String

	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PaginationInfo {
	currentPage: Int!
	perPage: Int!
	pageCount: Int
	itemCount: Int
	hasNextPage: Boolean
	hasPreviousPage: Boolean
}

type Query {
	studentById(_id: MongoID!): Student
	studentByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsStudentInput): [Student!]
	studentOne(
		"""
		Filter by fields
		"""
		filter: FilterFindOneStudentInput
		skip: Int
		sort: SortFindOneStudentInput
	): Student
	studentMany(
		"""
		Filter by fields
		"""
		filter: FilterFindManyStudentInput
		skip: Int
		limit: Int = 1000
		sort: SortFindManyStudentInput
	): [Student!]
	studentCount(
		"""
		Filter by fields
		"""
		filter: FilterStudentInput
	): Int
	studentConnection(
		"""
		Forward pagination argument for returning at most first edges
		"""
		first: Int

		"""
		Forward pagination argument for returning at most first edges
		"""
		after: String

		"""
		Backward pagination argument for returning at most last edges
		"""
		last: Int

		"""
		Backward pagination argument for returning at most last edges
		"""
		before: String

		"""
		Filter by fields
		"""
		filter: FilterFindManyStudentInput

		"""
		Sort argument for data ordering
		"""
		sort: SortConnectionStudentEnum = _ID_DESC
	): StudentConnection
	studentPagination(
		"""
		Page number for displaying
		"""
		page: Int
		perPage: Int = 20

		"""
		Filter by fields
		"""
		filter: FilterFindManyStudentInput
		sort: SortFindManyStudentInput
	): StudentPagination
	classById(_id: MongoID!): Class
	classByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsClassInput): [Class!]
	classOne(
		"""
		Filter by fields
		"""
		filter: FilterFindOneClassInput
		skip: Int
		sort: SortFindOneClassInput
	): Class
	classMany(
		"""
		Filter by fields
		"""
		filter: FilterFindManyClassInput
		skip: Int
		limit: Int = 1000
		sort: SortFindManyClassInput
	): [Class!]
	classesForSchool(schoolName: String): [Class]
	classCount(
		"""
		Filter by fields
		"""
		filter: FilterClassInput
	): Int
	classConnection(
		"""
		Forward pagination argument for returning at most first edges
		"""
		first: Int

		"""
		Forward pagination argument for returning at most first edges
		"""
		after: String

		"""
		Backward pagination argument for returning at most last edges
		"""
		last: Int

		"""
		Backward pagination argument for returning at most last edges
		"""
		before: String

		"""
		Filter by fields
		"""
		filter: FilterFindManyClassInput

		"""
		Sort argument for data ordering
		"""
		sort: SortConnectionClassEnum = _ID_DESC
	): ClassConnection
	classPagination(
		"""
		Page number for displaying
		"""
		page: Int
		perPage: Int = 20

		"""
		Filter by fields
		"""
		filter: FilterFindManyClassInput
		sort: SortFindManyClassInput
	): ClassPagination
	schoolById(_id: MongoID!): School
	schoolByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsSchoolInput): [School!]
	schoolOne(
		"""
		Filter by fields
		"""
		filter: FilterFindOneSchoolInput
		skip: Int
		sort: SortFindOneSchoolInput
	): School
	schoolMany(
		"""
		Filter by fields
		"""
		filter: FilterFindManySchoolInput
		skip: Int
		limit: Int = 1000
		sort: SortFindManySchoolInput
	): [School!]
	schoolCount(
		"""
		Filter by fields
		"""
		filter: FilterSchoolInput
	): Int
	schoolConnection(
		"""
		Forward pagination argument for returning at most first edges
		"""
		first: Int

		"""
		Forward pagination argument for returning at most first edges
		"""
		after: String

		"""
		Backward pagination argument for returning at most last edges
		"""
		last: Int

		"""
		Backward pagination argument for returning at most last edges
		"""
		before: String

		"""
		Filter by fields
		"""
		filter: FilterFindManySchoolInput

		"""
		Sort argument for data ordering
		"""
		sort: SortConnectionSchoolEnum = _ID_DESC
	): SchoolConnection
	schoolPagination(
		"""
		Page number for displaying
		"""
		page: Int
		perPage: Int = 20

		"""
		Filter by fields
		"""
		filter: FilterFindManySchoolInput
		sort: SortFindManySchoolInput
	): SchoolPagination
	getHomework(className: String!, date: Date, schoolName: String!): [ClassHomework]
	getAnnouncements(className: String!, date: Date, schoolName: String!): [ClassAnnouncements]
	getLessons: [String]
	getRoles: [String]
	studentsForClass(className: String, schoolName: String!): [Student]
	getSchedule(className: String!, schoolName: String!): [[String]]
}

type RemoveByIdClassPayload {
	"""
	Removed document ID
	"""
	recordId: MongoID

	"""
	Removed document
	"""
	record: Class
}

type RemoveByIdSchoolPayload {
	"""
	Removed document ID
	"""
	recordId: MongoID

	"""
	Removed document
	"""
	record: School
}

type RemoveByIdStudentPayload {
	"""
	Removed document ID
	"""
	recordId: MongoID

	"""
	Removed document
	"""
	record: Student
}

type RemoveManyClassPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

type RemoveManySchoolPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

type RemoveManyStudentPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

type RemoveOneSchoolPayload {
	"""
	Removed document ID
	"""
	recordId: MongoID

	"""
	Removed document
	"""
	record: School
}

type School {
	classes(limit: Int = 1000, sort: SortFindByIdsClassInput): [Class!]
	name: String!
	announcements: [SchoolAnnouncements]
	_id: MongoID!
}

type SchoolAnnouncements {
	text: String
	attachments: [SchoolAnnouncementsAttachments]
	to: Date
	createdBy: Float
	_id: MongoID
}

type SchoolAnnouncementsAttachments {
	value: String!
	url: String!
	album_id: Float
	_id: MongoID
}

input SchoolAnnouncementsAttachmentsInput {
	value: String!
	url: String!
	album_id: Float
	_id: MongoID
}

input SchoolAnnouncementsInput {
	text: String
	attachments: [SchoolAnnouncementsAttachmentsInput]
	to: Date
	createdBy: Float
	_id: MongoID
}

"""
A connection to a list of items.
"""
type SchoolConnection {
	"""
	Total object count.
	"""
	count: Int!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!

	"""
	Information to aid in pagination.
	"""
	edges: [SchoolEdge!]!
}

"""
An edge in a connection.
"""
type SchoolEdge {
	"""
	The item at the end of the edge
	"""
	node: School!

	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
List of items with pagination.
"""
type SchoolPagination {
	"""
	Total object count.
	"""
	count: Int

	"""
	Array of objects.
	"""
	items: [School!]

	"""
	Information to aid in pagination.
	"""
	pageInfo: PaginationInfo!
}

enum SortConnectionClassEnum {
	_ID_DESC
	_ID_ASC
	NAME_DESC
	NAME_ASC
}

enum SortConnectionSchoolEnum {
	_ID_DESC
	_ID_ASC
	NAME_DESC
	NAME_ASC
}

enum SortConnectionStudentEnum {
	_ID_DESC
	_ID_ASC
	VKID_DESC
	VKID_ASC
}

enum SortFindByIdsClassInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindByIdsSchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindByIdsStudentInput {
	_ID_ASC
	_ID_DESC
	VKID_ASC
	VKID_DESC
}

enum SortFindManyClassInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindManySchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindManyStudentInput {
	_ID_ASC
	_ID_DESC
	VKID_ASC
	VKID_DESC
}

enum SortFindOneClassInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindOneSchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortFindOneStudentInput {
	_ID_ASC
	_ID_DESC
	VKID_ASC
	VKID_DESC
}

enum SortRemoveOneSchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortUpdateManyClassInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortUpdateManySchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortUpdateManyStudentInput {
	_ID_ASC
	_ID_DESC
	VKID_ASC
	VKID_DESC
}

enum SortUpdateOneClassInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortUpdateOneSchoolInput {
	_ID_ASC
	_ID_DESC
	NAME_ASC
	NAME_DESC
}

enum SortUpdateOneStudentInput {
	_ID_ASC
	_ID_DESC
	VKID_ASC
	VKID_DESC
}

type Student {
	class: Class
	role: EnumStudentRole!
	vkId: Float!
	settings: StudentSettings
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID!
	schoolName: String
	className: String
}

"""
A connection to a list of items.
"""
type StudentConnection {
	"""
	Total object count.
	"""
	count: Int!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!

	"""
	Information to aid in pagination.
	"""
	edges: [StudentEdge!]!
}

"""
An edge in a connection.
"""
type StudentEdge {
	"""
	The item at the end of the edge
	"""
	node: Student!

	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
List of items with pagination.
"""
type StudentPagination {
	"""
	Total object count.
	"""
	count: Int

	"""
	Array of objects.
	"""
	items: [Student!]

	"""
	Information to aid in pagination.
	"""
	pageInfo: PaginationInfo!
}

type StudentSettings {
	notificationsEnabled: Boolean
	notificationTime: String
	daysForNotification: [Float]
}

input StudentSettingsInput {
	notificationsEnabled: Boolean
	notificationTime: String
	daysForNotification: [Float]
}

input UpdateByIdClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
	_id: MongoID!
}

type UpdateByIdClassPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: Class
}

input UpdateByIdSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
	_id: MongoID!
}

type UpdateByIdSchoolPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: School
}

input UpdateByIdStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
	_id: MongoID!
}

type UpdateByIdStudentPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: Student
}

input UpdateManyClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
}

type UpdateManyClassPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

input UpdateManySchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
}

type UpdateManySchoolPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

input UpdateManyStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
}

type UpdateManyStudentPayload {
	"""
	Affected documents number
	"""
	numAffected: Int
}

input UpdateOneClassInput {
	students: [MongoID]
	name: String
	homework: [ClassHomeworkInput]
	schedule: [[String]]
	announcements: [ClassAnnouncementsInput]
	roleUpCodes: [String]
	schoolName: String
}

type UpdateOneClassPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: Class
}

input UpdateOneSchoolInput {
	classes: [MongoID]
	name: String
	announcements: [SchoolAnnouncementsInput]
}

type UpdateOneSchoolPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: School
}

input UpdateOneStudentInput {
	class: MongoID
	role: EnumStudentRole
	vkId: Float
	settings: StudentSettingsInput
	lastHomeworkCheck: Date
	firstName: String
	secondName: String
	fullName: String
	registered: Boolean
}

type UpdateOneStudentPayload {
	"""
	Updated document ID
	"""
	recordId: MongoID

	"""
	Updated document
	"""
	record: Student
}
