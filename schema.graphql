# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Class {
    _id: MongoID!
    changes: [ClassChanges]
    homework: [ClassHomework]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students(limit: Int = 1000, sort: SortFindByIdsStudentInput): [Student]
    studentsCount: Int
}

type ClassChanges {
    attachments: String
    createdBy: Float
    text: String
    to: Date
}

"A connection to a list of items."
type ClassConnection {
    "Total object count."
    count: Int!
    "Information to aid in pagination."
    edges: [ClassEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ClassEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Class!
}

type ClassHomework {
    _id: MongoID
    attachments: String
    createdBy: Float
    lesson: String
    task: String
    to: Date
}

"List of items with pagination."
type ClassPagination {
    "Total object count."
    count: Int
    "Array of objects."
    items: [Class]
    "Information to aid in pagination."
    pageInfo: PaginationInfo!
}

type CreateManyClassPayload {
    "Count of all documents created"
    createCount: Int!
    "Created document ID"
    recordIds: [MongoID]!
    "Created documents"
    records: [Class]!
}

type CreateManyStudentPayload {
    "Count of all documents created"
    createCount: Int!
    "Created document ID"
    recordIds: [MongoID]!
    "Created documents"
    records: [Student]!
}

type Mutation {
    banStudent(isBan: Boolean, vkId: Int!): Student
    changeClass(newClassName: String!, vkId: Int!): Boolean
    changeDay(className: String!, day: [String], dayIndex: Int): Boolean
    changeSettings(diffObject: StudentSettingsInput, vkId: Int!): Boolean
    "Creates Many documents with mongoose defaults, setters, hooks and validation"
    classCreateMany(records: [CreateManyClassInput!]!): CreateManyClassPayload
    classCreateOne(className: String!): Class
    "Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document."
    classRemoveById(_id: MongoID!): RemoveByIdClassPayload
    "Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    classRemoveMany(
        #Filter by fields
        filter: FilterRemoveManyClassInput!
    ): RemoveManyClassPayload
    classRemoveOne(className: String!): Class
    "Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    classUpdateById(record: UpdateByIdClassInput!): UpdateByIdClassPayload
    "Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    classUpdateMany(
        #Filter by fields
        filter: FilterUpdateManyClassInput,
        limit: Int = 1000,
        record: UpdateManyClassInput!,
        skip: Int,
        sort: SortUpdateManyClassInput
    ): UpdateManyClassPayload
    "Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    classUpdateOne(
        #Filter by fields
        filter: FilterUpdateOneClassInput,
        record: UpdateOneClassInput!,
        skip: Int,
        sort: SortUpdateOneClassInput
    ): UpdateOneClassPayload
    removeStudentFromClass(vkId: Int!): Boolean
    "Creates Many documents with mongoose defaults, setters, hooks and validation"
    studentCreateMany(records: [CreateManyStudentInput!]!): CreateManyStudentPayload
    studentCreateOne(vkId: Int!): Student
    "Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document."
    studentRemoveById(_id: MongoID!): RemoveByIdStudentPayload
    "Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    studentRemoveMany(
        #Filter by fields
        filter: FilterRemoveManyStudentInput!
    ): RemoveManyStudentPayload
    studentRemoveOne(vkId: Int!): Student
    "Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    studentUpdateById(record: UpdateByIdStudentInput!): UpdateByIdStudentPayload
    "Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. "
    studentUpdateMany(
        #Filter by fields
        filter: FilterUpdateManyStudentInput,
        limit: Int = 1000,
        record: UpdateManyStudentInput!,
        skip: Int,
        sort: SortUpdateManyStudentInput
    ): UpdateManyStudentPayload
    "Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it."
    studentUpdateOne(
        #Filter by fields
        filter: FilterUpdateOneStudentInput,
        record: UpdateOneStudentInput!,
        skip: Int,
        sort: SortUpdateOneStudentInput
    ): UpdateOneStudentPayload
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PaginationInfo {
    currentPage: Int!
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    itemCount: Int
    pageCount: Int
    perPage: Int!
}

type Query {
    classById(_id: MongoID!): Class
    classByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsClassInput): [Class]
    classConnection(
        #Forward pagination argument for returning at most first edges
        after: String,
        #Backward pagination argument for returning at most last edges
        before: String,
        #Filter by fields
        filter: FilterFindManyClassInput,
        #Forward pagination argument for returning at most first edges
        first: Int,
        #Backward pagination argument for returning at most last edges
        last: Int,
        #Sort argument for data ordering
        sort: SortConnectionClassEnum = _ID_DESC
    ): ClassConnection
    classCount(
        #Filter by fields
        filter: FilterClassInput
    ): Int
    classMany(
        #Filter by fields
        filter: FilterFindManyClassInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyClassInput
    ): [Class]
    classOne(
        #Filter by fields
        filter: FilterFindOneClassInput,
        skip: Int,
        sort: SortFindOneClassInput
    ): Class
    classPagination(
        #Filter by fields
        filter: FilterFindManyClassInput,
        #Page number for displaying
        page: Int,
        perPage: Int = 20,
        sort: SortFindManyClassInput
    ): ClassPagination
    getChanges(className: String!, date: Date): ClassChanges
    getHomework(className: String!, date: Date): ClassHomework
    studentById(_id: MongoID!): Student
    studentByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsStudentInput): [Student]
    studentConnection(
        #Forward pagination argument for returning at most first edges
        after: String,
        #Backward pagination argument for returning at most last edges
        before: String,
        #Filter by fields
        filter: FilterFindManyStudentInput,
        #Forward pagination argument for returning at most first edges
        first: Int,
        #Backward pagination argument for returning at most last edges
        last: Int,
        #Sort argument for data ordering
        sort: SortConnectionStudentEnum = _ID_DESC
    ): StudentConnection
    studentCount(
        #Filter by fields
        filter: FilterStudentInput
    ): Int
    studentMany(
        #Filter by fields
        filter: FilterFindManyStudentInput,
        limit: Int = 1000,
        skip: Int,
        sort: SortFindManyStudentInput
    ): [Student]
    studentOne(
        #Filter by fields
        filter: FilterFindOneStudentInput,
        skip: Int,
        sort: SortFindOneStudentInput
    ): Student
    studentPagination(
        #Filter by fields
        filter: FilterFindManyStudentInput,
        #Page number for displaying
        page: Int,
        perPage: Int = 20,
        sort: SortFindManyStudentInput
    ): StudentPagination
}

type RemoveByIdClassPayload {
    "Removed document"
    record: Class
    "Removed document ID"
    recordId: MongoID
}

type RemoveByIdStudentPayload {
    "Removed document"
    record: Student
    "Removed document ID"
    recordId: MongoID
}

type RemoveManyClassPayload {
    "Affected documents number"
    numAffected: Int
}

type RemoveManyStudentPayload {
    "Affected documents number"
    numAffected: Int
}

type Student {
    _id: MongoID!
    banned: Boolean
    class: Class
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettings
    vkId: Float
}

"A connection to a list of items."
type StudentConnection {
    "Total object count."
    count: Int!
    "Information to aid in pagination."
    edges: [StudentEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type StudentEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Student!
}

"List of items with pagination."
type StudentPagination {
    "Total object count."
    count: Int
    "Array of objects."
    items: [Student]
    "Information to aid in pagination."
    pageInfo: PaginationInfo!
}

type StudentSettings {
    notificationTime: String
    notificationsEnabled: Boolean
}

type UpdateByIdClassPayload {
    "Updated document"
    record: Class
    "Updated document ID"
    recordId: MongoID
}

type UpdateByIdStudentPayload {
    "Updated document"
    record: Student
    "Updated document ID"
    recordId: MongoID
}

type UpdateManyClassPayload {
    "Affected documents number"
    numAffected: Int
}

type UpdateManyStudentPayload {
    "Affected documents number"
    numAffected: Int
}

type UpdateOneClassPayload {
    "Updated document"
    record: Class
    "Updated document ID"
    recordId: MongoID
}

type UpdateOneStudentPayload {
    "Updated document"
    record: Student
    "Updated document ID"
    recordId: MongoID
}

enum EnumStudentRole {
    ADMIN
    CONTRIBUTOR
    STUDENT
}

enum SortConnectionClassEnum {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortConnectionStudentEnum {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindByIdsClassInput {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindByIdsStudentInput {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyClassInput {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindManyStudentInput {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneClassInput {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneStudentInput {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateManyClassInput {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateManyStudentInput {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateOneClassInput {
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortUpdateOneStudentInput {
    VKID_ASC
    VKID_DESC
    _ID_ASC
    _ID_DESC
}

input ClassChangesInput {
    attachments: String
    createdBy: Float
    text: String
    to: Date
}

input ClassHomeworkInput {
    _id: MongoID
    attachments: String
    createdBy: Float
    lesson: String
    task: String
    to: Date
}

input CreateManyClassInput {
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String!
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input CreateManyStudentInput {
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float!
}

input FilterClassInput {
    AND: [FilterClassInput!]
    OR: [FilterClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterFindManyClassInput {
    AND: [FilterFindManyClassInput!]
    OR: [FilterFindManyClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterFindManyStudentInput {
    AND: [FilterFindManyStudentInput!]
    OR: [FilterFindManyStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindManyStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input FilterFindOneClassInput {
    AND: [FilterFindOneClassInput!]
    OR: [FilterFindOneClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindOneClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterFindOneStudentInput {
    AND: [FilterFindOneStudentInput!]
    OR: [FilterFindOneStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterFindOneStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input FilterRemoveManyClassInput {
    AND: [FilterRemoveManyClassInput!]
    OR: [FilterRemoveManyClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterRemoveManyClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterRemoveManyStudentInput {
    AND: [FilterRemoveManyStudentInput!]
    OR: [FilterRemoveManyStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterRemoveManyStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input FilterStudentInput {
    AND: [FilterStudentInput!]
    OR: [FilterStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input FilterUpdateManyClassInput {
    AND: [FilterUpdateManyClassInput!]
    OR: [FilterUpdateManyClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterUpdateManyClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterUpdateManyStudentInput {
    AND: [FilterUpdateManyStudentInput!]
    OR: [FilterUpdateManyStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterUpdateManyStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input FilterUpdateOneClassInput {
    AND: [FilterUpdateOneClassInput!]
    OR: [FilterUpdateOneClassInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterUpdateOneClassInput
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input FilterUpdateOneStudentInput {
    AND: [FilterUpdateOneStudentInput!]
    OR: [FilterUpdateOneStudentInput!]
    _id: MongoID
    _ids: [MongoID]
    "List of *indexed* fields that can be filtered via operators."
    _operators: OperatorsFilterUpdateOneStudentInput
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input NameOperatorsFilterClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

input NameOperatorsFilterFindManyClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

input NameOperatorsFilterFindOneClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

input NameOperatorsFilterRemoveManyClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

input NameOperatorsFilterUpdateManyClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

input NameOperatorsFilterUpdateOneClassInput {
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterClassInput {
    _id: _idOperatorsFilterClassInput
    name: NameOperatorsFilterClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyClassInput {
    _id: _idOperatorsFilterFindManyClassInput
    name: NameOperatorsFilterFindManyClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindManyStudentInput {
    _id: _idOperatorsFilterFindManyStudentInput
    vkId: VkIdOperatorsFilterFindManyStudentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindOneClassInput {
    _id: _idOperatorsFilterFindOneClassInput
    name: NameOperatorsFilterFindOneClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterFindOneStudentInput {
    _id: _idOperatorsFilterFindOneStudentInput
    vkId: VkIdOperatorsFilterFindOneStudentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterRemoveManyClassInput {
    _id: _idOperatorsFilterRemoveManyClassInput
    name: NameOperatorsFilterRemoveManyClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterRemoveManyStudentInput {
    _id: _idOperatorsFilterRemoveManyStudentInput
    vkId: VkIdOperatorsFilterRemoveManyStudentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterStudentInput {
    _id: _idOperatorsFilterStudentInput
    vkId: VkIdOperatorsFilterStudentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterUpdateManyClassInput {
    _id: _idOperatorsFilterUpdateManyClassInput
    name: NameOperatorsFilterUpdateManyClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterUpdateManyStudentInput {
    _id: _idOperatorsFilterUpdateManyStudentInput
    vkId: VkIdOperatorsFilterUpdateManyStudentInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterUpdateOneClassInput {
    _id: _idOperatorsFilterUpdateOneClassInput
    name: NameOperatorsFilterUpdateOneClassInput
}

"For performance reason this type contains only *indexed* fields."
input OperatorsFilterUpdateOneStudentInput {
    _id: _idOperatorsFilterUpdateOneStudentInput
    vkId: VkIdOperatorsFilterUpdateOneStudentInput
}

input StudentSettingsInput {
    notificationTime: String
    notificationsEnabled: Boolean
}

input UpdateByIdClassInput {
    _id: MongoID!
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input UpdateByIdStudentInput {
    _id: MongoID!
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input UpdateManyClassInput {
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input UpdateManyStudentInput {
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input UpdateOneClassInput {
    changes: [ClassChangesInput]
    homework: [ClassHomeworkInput]
    name: String
    roleUpCodes: [String]
    schedule: [[String]]
    students: [MongoID]
}

input UpdateOneStudentInput {
    banned: Boolean
    class: MongoID
    created: Date
    lastHomeworkCheck: Date
    role: EnumStudentRole
    settings: StudentSettingsInput
    vkId: Float
}

input VkIdOperatorsFilterFindManyStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input VkIdOperatorsFilterFindOneStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input VkIdOperatorsFilterRemoveManyStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input VkIdOperatorsFilterStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input VkIdOperatorsFilterUpdateManyStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input VkIdOperatorsFilterUpdateOneStudentInput {
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input _idOperatorsFilterClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindManyClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindManyStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindOneClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterFindOneStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterRemoveManyClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterRemoveManyStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterUpdateManyClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterUpdateManyStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterUpdateOneClassInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input _idOperatorsFilterUpdateOneStudentInput {
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}


"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID

scalar Date